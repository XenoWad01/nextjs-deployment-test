{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mc/Work/React_Marius_Learn/next-js-project-start/pages/index.js\";\nimport { MongoClient } from \"mongodb\"; // this will not be part of the client side bundle as it's only used in getStaticProps()\n// NextJS is smarter than you and does this...\n\nimport MeetupList from \"../components/meetups/MeetupList\";\nconst DUMMY_MEETUPS = [{\n  id: \"m1\",\n  title: \"A First Meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8c/Notredame_Paris.JPG/1024px-Notredame_Paris.JPG\",\n  address: \"Some address 5, 12345 Some City\",\n  description: \"This is a first meetup!\"\n}, {\n  id: \"m2\",\n  title: \"A Second Meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8c/Notredame_Paris.JPG/1024px-Notredame_Paris.JPG\",\n  address: \"Some address 4, 12345 Some City\",\n  description: \"This is a second meetup!\"\n}];\n\nconst HomePage = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, this);\n};\n/**\nexport const getServerSideProps = async (context) => {\n  // this runs on the server always on the server after deployment aka on each request i guess\n  // again this code will not reach the client side so it's safe to do backend stuff\n  //\n  // !!!! ONLY USE WHEN U GOT DATA THAT CHANGES LIKE MULTIPLE TIMES A SECOND\n  // !!!! OR IF YOU NEED ACCESS TO THE REQUEST OBJECT FOR AUTH STUFF\n  // !!!! OTHERWISE getStaticProps is the much much faster option\n\n  const req = context.req;\n  const res = context.res;\n\n  return {\n    props: {\n      meetups: DUMMY_MEETUPS,\n    },\n  };\n};\n **/\n\n\nexport const getStaticProps = async () => {\n  // this runs only in the build process it never reaches the client side, so you can do backend stuff\n  const client = await MongoClient.connect(\"mongodb+srv://mugurkek:mugurkekpassword01@cluster0.criol.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray();\n  client.close(); //you always have to return an object like this\n\n  return {\n    props: {\n      meetups: meetups\n    },\n    revalidate: 1 // number of seconds before re-generation on the server, such that when the users update stuff in the database we update the pregenerated html\n\n  };\n};\nexport default HomePage;","map":{"version":3,"sources":["/home/mc/Work/React_Marius_Learn/next-js-project-start/pages/index.js"],"names":["MongoClient","MeetupList","DUMMY_MEETUPS","id","title","image","address","description","HomePage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","close","revalidate"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B,C,CAAuC;AACvC;;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AAEA,MAAMC,aAAa,GAAG,CACpB;AACEC,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,gBAFT;AAGEC,EAAAA,KAAK,EACH,0GAJJ;AAKEC,EAAAA,OAAO,EAAE,iCALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CADoB,EASpB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,iBAFT;AAGEC,EAAAA,KAAK,EACH,0GAJJ;AAKEC,EAAAA,OAAO,EAAE,iCALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CAToB,CAAtB;;AAmBA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC;AAEA,QAAMC,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CACnB,0GADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB;AAEAN,EAAAA,MAAM,CAACO,KAAP,GAZwC,CAcxC;;AACA,SAAO;AACLV,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA;AADJ,KADF;AAILU,IAAAA,UAAU,EAAE,CAJP,CAIU;;AAJV,GAAP;AAMD,CArBM;AAuBP,eAAeZ,QAAf","sourcesContent":["import { MongoClient } from \"mongodb\"; // this will not be part of the client side bundle as it's only used in getStaticProps()\n// NextJS is smarter than you and does this...\nimport MeetupList from \"../components/meetups/MeetupList\";\n\nconst DUMMY_MEETUPS = [\n  {\n    id: \"m1\",\n    title: \"A First Meetup\",\n    image:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8c/Notredame_Paris.JPG/1024px-Notredame_Paris.JPG\",\n    address: \"Some address 5, 12345 Some City\",\n    description: \"This is a first meetup!\",\n  },\n  {\n    id: \"m2\",\n    title: \"A Second Meetup\",\n    image:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8c/Notredame_Paris.JPG/1024px-Notredame_Paris.JPG\",\n    address: \"Some address 4, 12345 Some City\",\n    description: \"This is a second meetup!\",\n  },\n];\n\nconst HomePage = (props) => {\n  return <MeetupList meetups={props.meetups} />;\n};\n\n/**\nexport const getServerSideProps = async (context) => {\n  // this runs on the server always on the server after deployment aka on each request i guess\n  // again this code will not reach the client side so it's safe to do backend stuff\n  //\n  // !!!! ONLY USE WHEN U GOT DATA THAT CHANGES LIKE MULTIPLE TIMES A SECOND\n  // !!!! OR IF YOU NEED ACCESS TO THE REQUEST OBJECT FOR AUTH STUFF\n  // !!!! OTHERWISE getStaticProps is the much much faster option\n\n  const req = context.req;\n  const res = context.res;\n\n  return {\n    props: {\n      meetups: DUMMY_MEETUPS,\n    },\n  };\n};\n **/\n\nexport const getStaticProps = async () => {\n  // this runs only in the build process it never reaches the client side, so you can do backend stuff\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://mugurkek:mugurkekpassword01@cluster0.criol.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const meetups = await meetupsCollection.find().toArray();\n\n  client.close();\n\n  //you always have to return an object like this\n  return {\n    props: {\n      meetups: meetups,\n    },\n    revalidate: 1, // number of seconds before re-generation on the server, such that when the users update stuff in the database we update the pregenerated html\n  };\n};\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}