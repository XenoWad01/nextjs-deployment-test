{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mc/Work/React_Marius_Learn/next-js-project-start/pages/[meetupId].js\";\nimport MeetupDetail from \"../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    id: props.meetupData.id,\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  return {\n    fallback: false,\n    // fallback set to FALSE\n    // ---- means that if a user tries to access an id that doesent exists he gets a 404\n    // ---- aka it means you defined ALL the supported paths here\n    // fallback set to TRUE\n    // ---- means that --||-- the server will try to dynamically pre-generate it\n    // For example we have hundreds of pages and we maybe don't pre-generate all of them\n    // but only our most popular pages\n    paths: [{\n      params: {\n        meetupId: \"m1\"\n      }\n    }, {\n      params: {\n        meetupId: \"m2\"\n      }\n    }]\n  };\n};\nexport const getStaticProps = async context => {\n  //fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: {\n        id: meetupId,\n        image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8c/Notredame_Paris.JPG/1280px-Notredame_Paris.JPG\",\n        title: \"First Meetup\",\n        address: \"Some street 5, some city\",\n        description: \"this is a first meetup\"\n      }\n    }\n  };\n};\nexport default MeetupDetails;","map":{"version":3,"sources":["/home/mc/Work/React_Marius_Learn/next-js-project-start/pages/[meetupId].js"],"names":["MeetupDetail","MeetupDetails","props","meetupData","id","image","title","address","description","getStaticPaths","fallback","paths","params","meetupId","getStaticProps","context","console","log"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,oCAAzB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE,QAAC,YAAD;AACE,IAAA,EAAE,EAAEA,KAAK,CAACC,UAAN,CAAiBC,EADvB;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBG,KAH1B;AAIE,IAAA,OAAO,EAAEJ,KAAK,CAACC,UAAN,CAAiBI,OAJ5B;AAKE,IAAA,WAAW,EAAEL,KAAK,CAACC,UAAN,CAAiBK;AALhC;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAVD;;AAYA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ;AADV,KADK,EAML;AACED,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ;AADV,KANK;AATF,GAAP;AAsBD,CAvBM;AAyBP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C;AACA,QAAMF,QAAQ,GAAGE,OAAO,CAACH,MAAR,CAAeC,QAAhC;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AAEA,SAAO;AACLX,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVC,QAAAA,EAAE,EAAES,QADM;AAEVR,QAAAA,KAAK,EACH,0GAHQ;AAIVC,QAAAA,KAAK,EAAE,cAJG;AAKVC,QAAAA,OAAO,EAAE,0BALC;AAMVC,QAAAA,WAAW,EAAE;AANH;AADP;AADF,GAAP;AAYD,CAlBM;AAoBP,eAAeP,aAAf","sourcesContent":["import MeetupDetail from \"../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = (props) => {\n  return (\n    <MeetupDetail\n      id={props.meetupData.id}\n      image={props.meetupData.image}\n      title={props.meetupData.title}\n      address={props.meetupData.address}\n      description={props.meetupData.description}\n    />\n  );\n};\n\nexport const getStaticPaths = async () => {\n  return {\n    fallback: false,\n    // fallback set to FALSE\n    // ---- means that if a user tries to access an id that doesent exists he gets a 404\n    // ---- aka it means you defined ALL the supported paths here\n    // fallback set to TRUE\n    // ---- means that --||-- the server will try to dynamically pre-generate it\n    // For example we have hundreds of pages and we maybe don't pre-generate all of them\n    // but only our most popular pages\n    paths: [\n      {\n        params: {\n          meetupId: \"m1\",\n        },\n      },\n      {\n        params: {\n          meetupId: \"m2\",\n        },\n      },\n    ],\n  };\n};\n\nexport const getStaticProps = async (context) => {\n  //fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n\n  console.log(meetupId);\n\n  return {\n    props: {\n      meetupData: {\n        id: meetupId,\n        image:\n          \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8c/Notredame_Paris.JPG/1280px-Notredame_Paris.JPG\",\n        title: \"First Meetup\",\n        address: \"Some street 5, some city\",\n        description: \"this is a first meetup\",\n      },\n    },\n  };\n};\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}